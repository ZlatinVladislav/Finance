{"version":3,"sources":["app/models/transaction.ts","app/models/pagination.ts","app/api/agent.ts","app/stores/transactionStore.ts","app/stores/userStore.ts","app/models/transactionType.ts","app/stores/transactionTypeStore.ts","app/stores/userProfileStore.ts","app/stores/bankStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","assets/pages.tsx","app/layout/NavBar.tsx","features/transactions/dashboard/TransactionListItem.tsx","features/transactions/dashboard/TransactionList.tsx","features/transactions/dashboard/TransactionFilters.tsx","features/transactions/dashboard/TransactionListItemPlaceholder.tsx","features/transactions/dashboard/TransactionDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LogInForm.tsx","features/errors/ValidationError.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MySelectInput.tsx","app/common/form/MyDateInput.tsx","features/transactions/form/TransactionForm.tsx","features/transactions/details/TransactionDetailedHeader.tsx","features/transactions/details/TransactionDetailedInfo.tsx","features/transactions/details/TransactionDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/modalContainer.tsx","features/transactiontypes/dashboard/TransactionTypeListItem.tsx","features/transactiontypes/dashboard/TransactionTypeLists.tsx","features/transactiontypes/dashboard/TransactionTypeFilters.tsx","features/transactiontypes/dashboard/TransactionTypeDashboard.tsx","features/transactiontypes/form/TransactionTypeForm.tsx","features/profiles/UserProfileHeader.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/UserProfilePhotos.tsx","app/models/userDescription.ts","app/common/form/MyTextArea.tsx","features/profiles/UserProfileAbout.tsx","features/profiles/UserProfileContent.tsx","features/profiles/UserProfilePage.tsx","app/layout/PrivateRoute.tsx","features/banks/dashboard/BankListItem.tsx","features/banks/dashboard/BankDashboard.tsx","app/models/bank.ts","features/transactions/form/TransactionBankForm.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["TransactionFormValues","transaction","id","undefined","money","transactionStatus","dateTransaction","transactionType","isCanceled","userProfile","error","this","Transaction","init","Object","assign","PaginatedResult","data","pagination","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","authorization","response","a","JSON","parse","status","toast","method","errors","hasOwnProperty","history","push","modalStateError","key","flat","setServerError","Promise","reject","responseBody","url","get","then","body","post","put","delete","agent","Transacions","list","params","details","create","update","cancell","Account","current","login","user","register","TransactionTypes","listAll","UserProfiles","userName","description","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","Banks","assignBank","bankId","transactionId","TransactionStore","transactionRegistry","Map","selectedTransaction","editMode","loading","loadingInitial","pagingParams","predicate","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadingTransactions","axiosParams","result","setTransaction","setPagination","setLoadingInitial","console","log","setRegistryClear","clear","loadTransactions","getTransaction","runInAction","state","createTransaction","newTransaction","updateTransaction","updatedTransaction","deleteTransaction","Date","cancelTransaction","makeAutoObservable","reaction","keys","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","transactionsByDate","reduce","transactions","format","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","transactionStore","getUser","credentials","setImage","image","TransactionTypeFormValues","TransactionType","TransactionTypeStore","transactionTypeRegistry","transactionTypeOption","selectedTransactionType","loadingTransactionTypes","setTransactionType","setTransactionTypeOption","loadingTransactionTypesAll","loadTransactionTypes","getTransactionType","createTransactionType","newTransactionType","updateTransactionType","updatedTransactionType","deleteTransactionType","text","UserProfileStore","userDescription","loadingProfile","uploading","loadUserProfile","createDescription","uploadDescription","photo","photos","isMain","userStore","find","p","filter","username","BankStore","bankRegistry","bankOption","selectedBank","loadingBanks","bank","setBank","setBankOption","loadBanks","getBank","name","transactionTypeStore","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","userProfileStore","bankStore","StoreContext","createContext","useStore","useContext","useStyles","makeStyles","alignCenter","fontSize","marginBottom","textAlignLast","searchIcon","alignSelf","backgroundColorWhite","backgroundColor","backgroundButtonColorTeal","color","colorRed","colorTeal","homePage","height","backgroundImage","navBar","display","justifyContent","root","overrides","MuiToolbar","regular","minHeight","positionRight","paddingLeft","marginTop","alignLeft","alignContent","justify","activityImageTextStyle","position","bottom","left","width","table","minWidth","observer","classes","React","useState","anchorEl","setAnchorEl","Boolean","handleClose","AppBar","className","Toolbar","MenuItem","component","NavLink","to","src","alt","style","Button","Avatar","float","IconButton","aria-label","aria-controls","aria-haspopup","onClick","event","currentTarget","Menu","keepMounted","onClose","PaperProps","Link","TransactionListItem","Segment","Group","Label","attached","textAlign","Item","Image","size","circular","Content","Header","as","Description","displayName","Icon","clearing","variant","groupedTransactions","map","group","Typography","Container","disabled","has","onChange","date","TransactionListItemPlaceholder","Placeholder","fluid","Line","Paragraph","floated","loadingNext","setLoadingNext","useEffect","Grid","container","item","xs","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","CircularProgress","MyTextInput","props","useField","field","meta","Form","Field","touched","label","Alert","severity","initialValues","email","password","onSubmit","setErrors","catch","handleSubmit","isSubmitting","autoComplete","placeholder","type","render","basic","positive","ValidationError","AlertTitle","err","i","Message","validationSchema","Yup","required","isValid","dirty","inverted","vertical","isLoggedin","LoadingComponent","Dimmer","active","Loader","MySelectInput","helpers","Select","clearable","options","setValue","onBlur","setTouched","MyDateInput","selected","useHistory","transactionTypesOptionsArray","useParams","min","transactionTypeId","nullable","sub","enableReinitialize","uuid","handleFormSubmit","placeholderText","dateFormat","activityImageStyle","target","setTarget","zIndex","padding","e","Column","verticalAlign","length","bankDto","maxWidth","TransactionDetailedHeader","TransactionDetailedInfo","TestErrors","baseUrl","setErros","ButtonGroup","NotFound","message","Modal","TransactionTypeListItem","transactionTypesAlphabetically","TransactionTypeLists","avatar","PhotoWidgetDropzone","setFiles","dzStyles","border","borderColor","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","widths","getCroppedCanvas","toBlob","blob","icon","isCurrentUser","addPhotoMode","setAddPhotoMode","setTraget","Tab","Pane","Card","itemsPerRow","handleSetMainPhoto","handleDeletePhoto","UserDescriptionFormValues","MyTextArea","rows","panes","menuItem","menu","menuPosition","PrivateRoute","Component","rest","columns","headerName","headerClassName","BankListItem","getRowId","banksOptionsArray","BankFormValues","bankTransaction","location","useLocation","finally","hideProgressBar","exact","path","HomePage","TransactionDashboard","TransactionTypeDashboard","BankDashboard","TransactionBankForm","TransactionTypeForm","TransactionForm","TransactionDetails","UserProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.aa4b219d.chunk.js","sourcesContent":["import { UserProfile } from \"./profile\";\r\nimport { Bank } from \"./bank\";\r\n\r\nexport interface Transaction {\r\n    id: string;\r\n    money: number;\r\n    transactionStatus: boolean;\r\n    dateTransaction: Date | null;\r\n    transactionType: string;\r\n    isCanceled: boolean;\r\n    userProfile?: UserProfile[];\r\n    bankDto?: Bank[];\r\n}\r\n\r\nexport class TransactionFormValues {\r\n    id?: string = undefined;\r\n    money: number = 0;\r\n    transactionStatus: boolean = false;\r\n    dateTransaction: Date | null = null;\r\n    transactionType: string = '';\r\n    isCanceled: boolean = false;\r\n    userProfile?: UserProfile[] = undefined;\r\n    error: null\r\n\r\n    constructor(transaction?: TransactionFormValues) {\r\n        if (transaction) {\r\n            this.id = transaction.id;\r\n            this.money = transaction.money;\r\n            this.dateTransaction = transaction.dateTransaction;\r\n            this.transactionType = transaction.transactionType;\r\n            this.isCanceled = transaction.isCanceled;\r\n            this.userProfile = transaction.userProfile;\r\n        }\r\n    }\r\n}\r\n\r\nexport class Transaction implements Transaction {\r\n    constructor(init?: TransactionFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}","export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 10) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { Transaction, TransactionFormValues } from \"../models/transaction\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../../index\";\r\nimport { store } from \"../stores/store\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { TransactionType, TransactionTypeFormValues } from \"../models/transactionType\";\r\nimport { Photo, UserProfile } from \"../models/profile\";\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { Bank, BankFormValues } from \"../models/bank\";\r\nimport { UserDescription } from \"../models/userDescription\";\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if(process.env.NODE_ENV==='development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response\r\n}, (error: AxiosError) => {\r\n    const {data, status, config} = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateError = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateError.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateError.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('Unauthorized')\r\n            break;\r\n        case 403:\r\n            toast.error('Forbidden')\r\n            break;\r\n        case 404:\r\n            history.push('/not-found')\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error')\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst request = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body?: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody)\r\n}\r\n\r\nconst Transacions = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Transaction[]>>('/Transaction', {params}).then(responseBody),\r\n    details: (id: string) => request.get<Transaction>(`/Transaction/${id}`),\r\n    create: (transaction: TransactionFormValues) => request.post<void>('/Transaction', transaction),\r\n    update: (transaction: TransactionFormValues) => request.put<void>(`/Transaction/${transaction.id}`, transaction),\r\n    delete: (id: string) => request.del<void>(`/Transaction/${id}`),\r\n    cancell: (id: string) => request.post<void>(`/Transaction/${id}/cancel`)\r\n}\r\n\r\nconst TransactionTypes = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<TransactionType[]>>('/TransactionType', {params}).then(responseBody),\r\n    listAll: () => axios.get<TransactionType[]>('/TransactionType/all'),\r\n    details: (id: string) => request.get<TransactionType>(`/TransactionType/${id}`),\r\n    create: (transactionType: TransactionTypeFormValues) => request.post<void>('/TransactionType', transactionType),\r\n    update: (transactionType: TransactionTypeFormValues) => request.put<void>(`/TransactionType/${transactionType.id}`, transactionType),\r\n    delete: (id: string) => request.del<void>(`/TransactionType/${id}`),\r\n}\r\n\r\nconst Banks = {\r\n    list: () => axios.get<Bank[]>('/Bank'),\r\n    assignBank:(bankId:string,transactionId:string)=>request.post<Bank>(`/Bank/${bankId}/transaction/${transactionId}`),\r\n    details: (id: string) => request.get<Bank>(`/Bank/${id}`)\r\n}\r\n\r\nconst Account = {\r\n    current: () => request.get<User>('/account'),\r\n    login: (user: UserFormValues) => request.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => request.post<User>('/account/register', user)\r\n}\r\n\r\nconst UserProfiles = {\r\n    get: (userName: string) => request.get<UserProfile>(`/userProfile/${userName}`),\r\n    post: (description: UserDescription) => request.post<void>(`/userProfile`,description),\r\n    put: (description: UserDescription) => request.put<void>(`/userProfile`,description),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photo', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => request.post(`/photo/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => request.del(`/photo/${id}`)\r\n}\r\n\r\nconst agent = {\r\n    Transacions, Account, TransactionTypes, UserProfiles, Banks\r\n}\r\n\r\nexport default agent;","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport { Transaction, TransactionFormValues } from \"../models/transaction\";\r\nimport agent from \"../api/agent\";\r\nimport { format } from \"date-fns\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class TransactionStore {\r\n    transactionRegistry = new Map<string, Transaction>();\r\n    selectedTransaction: Transaction | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', 'true');\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n\r\n        reaction(() => this.predicate.keys(), () => {\r\n            this.pagingParams = new PagingParams();\r\n            this.transactionRegistry.clear();\r\n            // this.loadingTransactions()\r\n        })\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate()\r\n                this.predicate.set('all','true' );\r\n                break;\r\n            case'transactionStatusIncome':\r\n                resetPredicate()\r\n                this.predicate.set('transactionStatus', true);\r\n                break;\r\n            case'transactionStatusOutcome':\r\n                resetPredicate()\r\n                this.predicate.set('transactionStatus', false);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach(((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        }))\r\n        return params;\r\n    }\r\n\r\n    get transactionsByDate() {\r\n        return Array.from(this.transactionRegistry.values()).sort((a, b) =>\r\n            a.dateTransaction!.getTime() + b.dateTransaction!.getTime());\r\n    }\r\n\r\n    get groupedTransactions() {\r\n        return Object.entries(\r\n            this.transactionsByDate.reduce((transactions, transaction) => {\r\n                const dateTransaction = format(transaction.dateTransaction!, 'dd MMM yyyy');\r\n                transactions[dateTransaction] = transactions[dateTransaction] ? [...transactions[dateTransaction], transaction] : [transaction];\r\n                return transactions;\r\n            }, {} as { [key: string]: Transaction[] })\r\n        )\r\n    }\r\n\r\n    loadingTransactions = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Transacions.list(this.axiosParams);\r\n            result.data.forEach(transaction => {\r\n                this.setTransaction(transaction);\r\n            })\r\n            this.setPagination(result.pagination)\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    setRegistryClear = () => {\r\n        this.transactionRegistry.clear();\r\n    }\r\n\r\n    loadTransactions = async (id: string) => {\r\n        let transaction = this.getTransaction(id);\r\n        if (transaction) {\r\n            this.selectedTransaction = transaction;\r\n            return transaction;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                transaction = await agent.Transacions.details(id);\r\n                this.setTransaction(transaction);\r\n                runInAction(() => {\r\n                    this.selectedTransaction = transaction;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return transaction;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createTransaction = async (transaction: TransactionFormValues) => {\r\n        try {\r\n            await agent.Transacions.create(transaction);\r\n            const newTransaction=new Transaction(transaction);\r\n            this.setTransaction(newTransaction);\r\n            runInAction(() => {\r\n                this.selectedTransaction = newTransaction;\r\n            })\r\n        } catch (error) {\r\n            console.log(error.response)\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    updateTransaction = async (transaction: TransactionFormValues) => {\r\n        try {\r\n            await agent.Transacions.update(transaction);\r\n            runInAction(() => {\r\n                if(transaction.id){\r\n                    let updatedTransaction={...this.getTransaction(transaction.id),...transaction}\r\n                    this.transactionRegistry.set(transaction.id, updatedTransaction  as Transaction);\r\n                    this.selectedTransaction = updatedTransaction as Transaction;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    deleteTransaction = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Transacions.delete(id);\r\n            runInAction(() => {\r\n                this.transactionRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    private setTransaction = (transaction: Transaction) => {\r\n        transaction.dateTransaction = new Date(transaction.dateTransaction!);\r\n        this.transactionRegistry.set(transaction.id, transaction);\r\n    }\r\n\r\n    private getTransaction = (id: string) => {\r\n        return this.transactionRegistry.get(id);\r\n    }\r\n\r\n    cancelTransaction = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Transacions.cancell(this.selectedTransaction!.id);\r\n            runInAction(() => {\r\n                this.selectedTransaction!.isCanceled = !this.selectedTransaction?.isCanceled;\r\n                this.transactionRegistry.set(this.selectedTransaction!.id, this.selectedTransaction!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(() => this.loading = false)\r\n        }\r\n    }\r\n}\r\n","import { User, UserFormValues } from \"../models/user\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { store } from \"./store\";\r\nimport { history } from \"../../index\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedin() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user)\r\n            history.push('/transactions');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        store.transactionStore.setRegistryClear();\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    register = async (credentials: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(credentials);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user)\r\n            history.push('/transactions');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) {\r\n            this.user.image = image;\r\n        }\r\n    }\r\n}","export interface TransactionType {\r\n    id: string;\r\n    transactionType: string;\r\n}\r\n\r\nexport class TransactionTypeFormValues {\r\n    id?: string = undefined;\r\n    transactionType: string = '';\r\n\r\n    constructor(transactionType?: TransactionTypeFormValues) {\r\n        if (transactionType) {\r\n            this.id = transactionType.id;\r\n            this.transactionType = transactionType.transactionType;\r\n        }\r\n    }\r\n}\r\n\r\nexport class TransactionType implements TransactionType {\r\n    constructor(init?: TransactionTypeFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { TransactionType, TransactionTypeFormValues } from \"../models/transactionType\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class TransactionTypeStore {\r\n    transactionTypeRegistry = new Map<string, TransactionType>();\r\n    transactionTypeOption = new Map<string, string>();\r\n    selectedTransactionType: TransactionType | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    predicate = new Map().set('all', 'true');\r\n    pagingParams = new PagingParams();\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n\r\n        reaction(() => this.predicate.keys(), () => {\r\n            this.pagingParams = new PagingParams();\r\n            this.transactionTypeRegistry.clear();\r\n            this.loadingTransactionTypes()\r\n        })\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach(((value, key) => {\r\n            params.append(key, value);\r\n        }))\r\n        return params;\r\n    }\r\n\r\n    get transactionTypesAlphabetically() {\r\n        return Array.from(this.transactionTypeRegistry.values())\r\n    }\r\n\r\n    loadingTransactionTypes = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.TransactionTypes.list(this.axiosParams);\r\n            result.data.forEach(transactionType => {\r\n                this.setTransactionType(transactionType);\r\n                this.setTransactionTypeOption(transactionType);\r\n            })\r\n            this.setPagination(result.pagination)\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    loadingTransactionTypesAll = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.TransactionTypes.listAll();\r\n            result.data.forEach(transactionType => {\r\n                this.setTransactionTypeOption(transactionType);\r\n            })\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    get transactionTypesOptionsArray() {\r\n        return Array.from(this.transactionTypeOption, ([text, value]) => ({text, value}));\r\n    }\r\n\r\n    setRegistryClear = () => {\r\n        this.transactionTypeRegistry.clear();\r\n    }\r\n\r\n    loadTransactionTypes = async (id: string) => {\r\n        let transactionType = this.getTransactionType(id);\r\n        if (transactionType) {\r\n            this.selectedTransactionType = transactionType;\r\n            return transactionType;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                transactionType = await agent.TransactionTypes.details(id);\r\n                this.setTransactionType(transactionType);\r\n                runInAction(() => {\r\n                    this.selectedTransactionType = transactionType;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return transactionType;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createTransactionType = async (transactionType: TransactionTypeFormValues) => {\r\n        try {\r\n            await agent.TransactionTypes.create(transactionType);\r\n            const newTransactionType = new TransactionType(transactionType);\r\n            this.setTransactionType(newTransactionType);\r\n            runInAction(() => {\r\n                this.selectedTransactionType = newTransactionType;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    updateTransactionType = async (transactionType: TransactionTypeFormValues) => {\r\n        try {\r\n            await agent.TransactionTypes.update(transactionType);\r\n            runInAction(() => {\r\n                if (transactionType.id) {\r\n                    let updatedTransactionType = {...this.getTransactionType(transactionType.id), ...transactionType}\r\n                    this.transactionTypeRegistry.set(transactionType.id, updatedTransactionType as TransactionType);\r\n                    this.selectedTransactionType = transactionType as TransactionType;\r\n                    this.transactionTypeOption.clear()\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    deleteTransactionType = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.TransactionTypes.delete(id);\r\n            runInAction(() => {\r\n                this.transactionTypeRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    private setTransactionType = (transactionType: TransactionType) => {\r\n        this.transactionTypeRegistry.set(transactionType.id, transactionType);\r\n    }\r\n\r\n    private setTransactionTypeOption = (transactionType: TransactionType) => {\r\n        this.transactionTypeOption.set(transactionType.transactionType, transactionType.id);\r\n    }\r\n\r\n    private getTransactionType = (id: string) => {\r\n        return this.transactionTypeRegistry.get(id);\r\n    }\r\n}\r\n","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { Photo, UserProfile } from \"../models/profile\";\r\nimport agent from \"../api/agent\";\r\nimport { store } from \"./store\";\r\nimport { UserDescription, UserDescriptionFormValues } from \"../models/userDescription\";\r\n\r\nexport default class UserProfileStore {\r\n    userProfile: UserProfile | null = null;\r\n    userDescription:UserDescription|null=null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.userProfile) {\r\n            return store.userStore.user.username === this.userProfile.userName;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadUserProfile = async (userName: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const userProfile = await agent.UserProfiles.get(userName);\r\n            runInAction(() => {\r\n                this.userProfile = userProfile;\r\n                this.loadingProfile = false\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false)\r\n        }\r\n    }\r\n\r\n    createDescription = async (description: UserDescriptionFormValues) => {\r\n        this.uploading = true;\r\n        try {\r\n            await agent.UserProfiles.post(description);\r\n            runInAction(() => {\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    uploadDescription = async (description: UserDescriptionFormValues) => {\r\n        this.uploading = true;\r\n        try {\r\n            await agent.UserProfiles.put(description);\r\n            runInAction(() => {\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.UserProfiles.uploadPhoto(file);\r\n            const photo = response.data\r\n            runInAction(() => {\r\n                if (this.userProfile) {\r\n                    this.userProfile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.userProfile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.UserProfiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.userProfile && this.userProfile.photos) {\r\n                    this.userProfile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.userProfile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.userProfile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false)\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.UserProfiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.userProfile) {\r\n                    this.userProfile.photos = this.userProfile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false)\r\n            console.log(error)\r\n        }\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Bank } from \"../models/bank\";\r\n\r\nexport default class BankStore {\r\n    bankRegistry = new Map<string, Bank>();\r\n    bankOption = new Map<string, string>();\r\n    selectedBank: Bank | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    predicate = new Map().set('all', 'true');\r\n    pagingParams = new PagingParams();\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n\r\n        reaction(() => this.predicate.keys(), () => {\r\n            this.pagingParams = new PagingParams();\r\n            this.bankRegistry.clear();\r\n            this.loadingBanks()\r\n        })\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach(((value, key) => {\r\n            params.append(key, value);\r\n        }))\r\n        return params;\r\n    }\r\n\r\n    get banksAlphabetically() {\r\n        return Array.from(this.bankRegistry.values())\r\n    }\r\n\r\n    loadingBanks = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Banks.list();\r\n            result.data.forEach(bank => {\r\n                this.setBank(bank);\r\n                this.setBankOption(bank);\r\n            })\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    get banksOptionsArray() {\r\n        return Array.from(this.bankOption, ([text, value]) => ({text, value}));\r\n    }\r\n\r\n    setRegistryClear = () => {\r\n        this.bankRegistry.clear();\r\n    }\r\n\r\n    loadBanks = async (id: string) => {\r\n        let bank = this.getBank(id);\r\n        if (bank) {\r\n            this.selectedBank = bank;\r\n            return bank;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                bank = await agent.Banks.details(id);\r\n                this.setBank(bank);\r\n                runInAction(() => {\r\n                    this.selectedBank = bank;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return bank;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    assignBank = async (bankId: string,transactionId:string) => {\r\n            this.loadingInitial = true;\r\n            try {\r\n                await agent.Banks.assignBank(bankId,transactionId);\r\n                this.setLoadingInitial(false);\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    // createBank = async (bank: TransactionTypeFormValues) => {\r\n    //     try {\r\n    //         await agent.TransactionTypes.create(transactionType);\r\n    //         const newTransactionType = new TransactionType(transactionType);\r\n    //         this.setTransactionType(newTransactionType);\r\n    //         runInAction(() => {\r\n    //             this.selectedTransactionType = newTransactionType;\r\n    //         })\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // }\r\n\r\n    // updateTransactionType = async (transactionType: TransactionTypeFormValues) => {\r\n    //     try {\r\n    //         await agent.TransactionTypes.update(transactionType);\r\n    //         runInAction(() => {\r\n    //             if (transactionType.id) {\r\n    //                 let updatedTransactionType = {...this.getTransactionType(transactionType.id), ...transactionType}\r\n    //                 this.transactionTypeRegistry.set(transactionType.id, updatedTransactionType as TransactionType);\r\n    //                 this.selectedTransactionType = transactionType as TransactionType;\r\n    //                 this.transactionTypeOption.clear()\r\n    //             }\r\n    //         })\r\n    //     } catch (error) {\r\n    //         console.log(error)\r\n    //     }\r\n    // }\r\n\r\n    // deleteTransactionType = async (id: string) => {\r\n    //     this.loading = true;\r\n    //     try {\r\n    //         await agent.TransactionTypes.delete(id);\r\n    //         runInAction(() => {\r\n    //             this.transactionTypeRegistry.delete(id);\r\n    //             this.loading = false;\r\n    //         })\r\n    //     } catch (error) {\r\n    //         console.log(error);\r\n    //         runInAction(() => {\r\n    //             this.loading = false;\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    private setBank = (bank: Bank) => {\r\n        this.bankRegistry.set(bank.id, bank);\r\n    }\r\n\r\n    private setBankOption = (bank: Bank) => {\r\n        this.bankOption.set(bank.name, bank.id);\r\n    }\r\n\r\n    private getBank = (id: string) => {\r\n        return this.bankRegistry.get(id);\r\n    }\r\n}\r\n","import TransactionStore from \"./transactionStore\";\r\nimport { createContext, useContext } from \"react\";\r\nimport CommonStore from \"./commonStore\";\r\nimport UserStore from \"./userStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport TransactionTypeStore from \"./transactionTypeStore\";\r\nimport UserProfileStore from \"./userProfileStore\";\r\nimport BankStore from \"./bankStore\";\r\n\r\ninterface Store {\r\n    transactionTypeStore:TransactionTypeStore\r\n    transactionStore: TransactionStore\r\n    bankStore:BankStore\r\n    commonStore: CommonStore\r\n    userStore: UserStore\r\n    modalStore: ModalStore\r\n    userProfileStore:UserProfileStore\r\n}\r\n\r\nexport const store: Store = {\r\n    transactionTypeStore:new TransactionTypeStore(),\r\n    transactionStore: new TransactionStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    userProfileStore:new UserProfileStore(),\r\n    bankStore:new BankStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { ServerError } from \"../models/serverError\";\r\nimport { makeAutoObservable, reaction } from \"mobx\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\";\r\n\r\ninterface Modal{\r\n    open:boolean;\r\n    body:JSX.Element|null;\r\n}\r\n\r\nexport default class ModalStore{\r\n    modal:Modal={\r\n        open:false,\r\n        body:null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal=(content:JSX.Element)=>{\r\n        this.modal.open=true;\r\n        this.modal.body=content;\r\n    }\r\n\r\n    closeModal=()=>{\r\n        this.modal.open=false;\r\n        this.modal.body=null;\r\n    }\r\n}","import { makeStyles } from \"@material-ui/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n    alignCenter: {\r\n        fontSize: \"30px\",\r\n        marginBottom: \"20px\",\r\n        textAlignLast: \"center\"\r\n    },\r\n    searchIcon: {\r\n        alignSelf: \"center !important\",\r\n        fontSize: \"150px\"\r\n    },\r\n    backgroundColorWhite: {\r\n        backgroundColor: \"white\"\r\n    },\r\n    backgroundButtonColorTeal: {\r\n        color: 'white',\r\n        backgroundColor: \"teal\",\r\n        \"&:hover\": {\r\n            backgroundColor: \"rgb(32, 167, 172)\"\r\n        }\r\n    },\r\n    colorRed: {\r\n        color: \"red\"\r\n    },\r\n    colorTeal: {\r\n        color: \"teal\"\r\n    },\r\n    homePage:{\r\n        height: '100%',\r\n        backgroundImage: \"linear-gradient(135deg, rgb(24, 42, 115) 0%, rgb(33, 138, 174) 69%, rgb(32, 167, 172) 89%)\",\r\n        color:'white'\r\n    },\r\n    navBar: {\r\n        backgroundImage: \"linear-gradient(135deg, rgb(24, 42, 115) 0%, rgb(33, 138, 174) 69%, rgb(32, 167, 172) 89%)\",\r\n        display: 'flex', justifyContent: 'space-between'\r\n\r\n    },\r\n    root: {\r\n        '& .super-app-theme--header': {\r\n            backgroundColor: \"red\",\r\n            '&:hover': {\r\n                backgroundColor: \"red\",\r\n            },\r\n        },\r\n    },\r\n    overrides: {\r\n        MuiToolbar: {\r\n            regular: {\r\n                '@media (min-width: 600px)': {\r\n                    minHeight: \"0px\"\r\n                }\r\n            }\r\n        },\r\n    },\r\n    positionRight: {\r\n\r\n    },\r\n    filter: {\r\n        paddingLeft:\"20px\",\r\n        marginTop: \"36px\"\r\n    },\r\n    alignLeft: {\r\n        alignContent: 'left',\r\n        justify: 'flex-end'\r\n    },\r\n    activityImageTextStyle: {\r\n        position: 'absolute',\r\n        bottom: '5%',\r\n        left: '5%',\r\n        width: 'auto',\r\n        height: '50',\r\n        color: 'white',\r\n    },\r\n    table: {\r\n        minWidth: 650,\r\n    }\r\n});","import React from \"react\";\r\nimport { Container, Button, MenuItem, AppBar, Toolbar, Select, Avatar, InputLabel } from \"@material-ui/core\";\r\nimport { useStore } from \"../stores/store\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useStyles } from \"../../assets/pages\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport { Menu } from \"@material-ui/core\";\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\nexport default observer(function NavBar() {\r\n    const classes = useStyles();\r\n    const {userStore: {user, logout}} = useStore();\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n    const open = Boolean(anchorEl);\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <AppBar position=\"static\" className={classes.navBar}>\r\n            <Toolbar>\r\n                <MenuItem component={NavLink} to='/'>\r\n                    <img src=\"/assets/logo.png\" alt='logo' style={{height: '38px'}}/>\r\n                    Finance\r\n                </MenuItem>\r\n                <MenuItem component={NavLink} to='/transactions'>Transactions</MenuItem>\r\n                <MenuItem component={NavLink} to='/transactionTypes'>Transaction Types</MenuItem>\r\n                <MenuItem component={NavLink} to='/banks'>Banks</MenuItem>\r\n                <MenuItem component={NavLink} to='/error'>Errors</MenuItem>\r\n                <MenuItem>\r\n                    <Button component={NavLink} to='/createTransaction'\r\n                            style={{backgroundColor: 'rgba(76,255,0,0.61)'}}>Create Transaction</Button>\r\n                </MenuItem>\r\n                <MenuItem >\r\n                    <Avatar src={user?.image || '/assets/user.png'}\r\n                            style={{float: 'inline-end', width: '35px', height: 'auto'}}/>\r\n                    <IconButton\r\n                        aria-label=\"more\"\r\n                        aria-controls=\"long-menu\"\r\n                        aria-haspopup=\"true\"\r\n                        onClick={handleClick}\r\n                    >\r\n                        <MoreVertIcon/>\r\n                    </IconButton>\r\n                    <Menu\r\n                        id=\"long-menu\"\r\n                        anchorEl={anchorEl}\r\n                        keepMounted\r\n                        open={open}\r\n                        onClick={handleClose}\r\n                        onClose={handleClose}\r\n                        PaperProps={{\r\n                            style: {\r\n                                width: '20ch',\r\n                            },\r\n                        }}\r\n                    >\r\n                        <MenuItem component={Link} to={`/userProfile/${user?.username}`}>My Profile</MenuItem>\r\n                        <MenuItem onClick={logout}>Logout</MenuItem>\r\n                    </Menu>\r\n                </MenuItem>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n})\r\n","import { Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport { Transaction } from \"../../../app/models/transaction\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { format } from 'date-fns';\r\nimport { useStyles } from \"../../../assets/pages\";\r\n\r\ninterface Props {\r\n    transaction: Transaction\r\n}\r\n\r\nexport default function TransactionListItem({transaction}: Props) {\r\n    const classes = useStyles();\r\n    const {userStore: {user}} = useStore();\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {transaction.isCanceled &&\r\n                <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}}/>\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image size='tiny' circular src={user?.image || 'assets/user.png'}/>\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/transactions/${transaction.id}`}>\r\n                                {transaction.money}\r\n                            </Item.Header>\r\n                            <Item.Description>Created by <Link\r\n                                to={`/userProfile/${user?.username}`}>{user?.displayName}</Link></Item.Description>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='calendar'/>{format(transaction.dateTransaction!, 'dd MMM yyyy')}\r\n                </span>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>\r\n                    <Icon name='calculator'/>{transaction.transactionStatus ? (<span>Income</span>) : (\r\n                    <span>Outcome</span>)}\r\n                </span>\r\n                <Button component={Link} to={`/transactions/${transaction.id}`}\r\n                      className={classes.backgroundButtonColorTeal}\r\n                        variant=\"contained\"\r\n                        style={{\r\n                             marginTop:'10px',\r\n                             display: \"flex\"\r\n                        }}\r\n                >View</Button>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import React, { Fragment } from \"react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport TransactionListItem from \"./TransactionListItem\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { useStyles } from \"../../../assets/pages\";\r\n\r\nexport default observer(function TransactionList() {\r\n    const classes = useStyles();\r\n    const {transactionStore} = useStore();\r\n    const {groupedTransactions} = transactionStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedTransactions.map(([group, transactions]) => (\r\n                <Fragment key={group}>\r\n                    <Typography className={classes.colorTeal}>\r\n                        {group}\r\n                    </Typography>\r\n                    {transactions.map((transaction) => (\r\n                        <TransactionListItem key={transaction.id} transaction={transaction}/>\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    )\r\n})","import React from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Typography, MenuItem, Container } from \"@material-ui/core\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { useStyles } from \"../../../assets/pages\";\r\n\r\n\r\nexport default observer(function TransactionFilters() {\r\n    const classes = useStyles();\r\n    const {transactionStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Container className={classes.backgroundColorWhite}>\r\n                <Typography variant='h3'>Filters</Typography>\r\n                <MenuItem\r\n                    disabled={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                >All Transactions</MenuItem>\r\n                <MenuItem\r\n                    disabled={predicate.get('transactionStatus') === true}\r\n                    onClick={() => setPredicate('transactionStatusIncome', 'true')}>\r\n                    Income transactions</MenuItem>\r\n                <MenuItem disabled={predicate.get('transactionStatus') === false}\r\n                          onClick={() => setPredicate('transactionStatusOutcome', 'false')}>Outcome\r\n                    transactions</MenuItem>\r\n            </Container>\r\n            <Typography style={{marginBottom:'20px'}}/>\r\n            <Calendar\r\n                onChange={(date => setPredicate('startDate', date as Date))}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function TransactionListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment clearing>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { CircularProgress, Container,Grid } from \"@material-ui/core\";\r\nimport TransactionList from \"./TransactionList\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport TransactionFilters from \"./TransactionFilters\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport TransactionListItemPlaceholder from \"./TransactionListItemPlaceholder\";\r\nimport { useStyles } from \"../../../assets/pages\";\r\n\r\nexport default observer(function TransactionDashboard() {\r\n    const {transactionStore} = useStore();\r\n    const classes = useStyles();\r\n    const {\r\n        loadTransactions,\r\n        transactionRegistry,\r\n        loadingTransactions,\r\n        setPagingParams,\r\n        pagination,\r\n        pagingParams\r\n    } = transactionStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadingTransactions().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (transactionRegistry.size <= 1) {\r\n            loadingTransactions();\r\n        }\r\n    }, [transactionRegistry.size, loadTransactions, pagingParams]);\r\n\r\n    return (\r\n        <Grid container>\r\n            <Grid item xs={7}>\r\n                {transactionStore.loadingInitial && !loadingNext ? (\r\n                        <>\r\n                            <TransactionListItemPlaceholder/>\r\n                            <TransactionListItemPlaceholder/>\r\n                        </>\r\n                    ) :\r\n                    <InfiniteScroll pageStart={0} loadMore={handleGetNext}\r\n                                    hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                                    initialLoad={false}>\r\n                        <TransactionList/>\r\n                        <Container className={classes.alignCenter}>\r\n                            {loadingNext ?\r\n                                <CircularProgress/> : false}\r\n                        </Container>\r\n                    </InfiniteScroll>\r\n                }\r\n            </Grid>\r\n            <Grid item xs={5} className={classes.filter}>\r\n                <TransactionFilters/>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n})\r\n  ","import React from \"react\";\r\nimport { useField } from \"formik\";\r\nimport { Form } from \"semantic-ui-react\";\r\nimport { Alert } from '@material-ui/lab';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field}{...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Alert severity=\"error\">{meta.error}</Alert>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\nexport default observer(function LogInForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) =>\r\n                userStore.login(values).catch(error => setErrors({error: 'Invalid email or password'}))}>\r\n\r\n            {({handleSubmit, isSubmitting,errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Finance' color='teal' textAlign='center'/>\r\n                    <MyTextInput placeholder='Email' name='email'/>\r\n                    <MyTextInput placeholder='Password' name='password' type='password'/>\r\n                    <ErrorMessage name='error' render={()=>\r\n                        <Label style={{marginBottom:10}} basic color='red' content={errors.error}/>}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid/>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\nimport { Alert, AlertTitle } from \"@material-ui/lab\"\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationError({errors}: Props) {\r\n    return (\r\n        <Alert severity=\"error\">\r\n            {errors && (\r\n                <AlertTitle>\r\n                    {errors.map((err: any, i:any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </AlertTitle>\r\n            )}\r\n        </Alert>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport * as Yup from 'yup'\r\nimport ValidationError from \"../errors/ValidationError\";\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) =>\r\n                userStore.register(values).catch(error => setErrors({error}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Finance' color='teal' textAlign='center'/>\r\n                    <MyTextInput placeholder='DisplayName' name='displayName'/>\r\n                    <MyTextInput placeholder='Username' name='username'/>\r\n                    <MyTextInput placeholder='Email' name='email'/>\r\n                    <MyTextInput placeholder='Password' name='password' type='password'/>\r\n                    <ErrorMessage name='error' render={() =>\r\n                        <ValidationError errors={errors.error}/>}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive\r\n                            content='Register' type='submit' fluid/>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container, Header, Image, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { observable } from \"mobx\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport LogInForm from \"../users/LogInForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\n\r\nexport default observer(function HomePage() {\r\n    const {userStore, modalStore} = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}}/>\r\n                    Finance\r\n                </Header>\r\n                {userStore.isLoggedin ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Finance'/>\r\n                        <Button as={Link} to='/transactions' size='huge' inverted>\r\n                            Open Transaction\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LogInForm/>)} size='huge' inverted>\r\n                            Log In\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm/>)} size='huge' inverted>\r\n                            Register\r\n                        </Button>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = \"Loading...\"}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content}/>\r\n        </Dimmer>\r\n    )\r\n}","import React from \"react\";\r\nimport { useField } from \"formik\";\r\nimport { Form, Select } from \"semantic-ui-react\";\r\nimport { Alert } from '@material-ui/lab';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(event, data) => helpers.setValue(data.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Alert severity=\"error\">{meta.error}</Alert>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import React from \"react\";\r\nimport { useField } from \"formik\";\r\nimport { Form } from \"semantic-ui-react\";\r\nimport DatePicker, { ReactDatePickerProps } from \"react-datepicker\";\r\nimport { Alert } from '@material-ui/lab';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Alert severity=\"error\">{meta.error}</Alert>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { v4 as uuid } from 'uuid';\r\nimport { ErrorMessage, Form, Formik } from \"formik\";\r\nimport * as Yup from 'yup'\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { TransactionFormValues } from \"../../../app/models/transaction\";\r\nimport ValidationError from \"../../errors/ValidationError\";\r\n\r\nexport default observer(function TransactionForm() {\r\n    const history = useHistory();\r\n    const {\r\n        transactionTypeStore: {\r\n            loadTransactionTypes,\r\n            transactionTypesOptionsArray,\r\n            loadingTransactionTypesAll\r\n        }, transactionStore\r\n    } = useStore();\r\n    const {\r\n        createTransaction,\r\n        updateTransaction,\r\n        loadTransactions,\r\n        loadingInitial\r\n    } = transactionStore;\r\n    const {id} = useParams<{ id: string }>();\r\n\r\n    const [transaction, setTransaction] = useState<TransactionFormValues>(new TransactionFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        money: Yup.number().min(1).required('The money field is required and greater than 0'),\r\n        transactionStatus: Yup.string().required('The transaction status field is required'),\r\n        transactionTypeId: Yup.string().required('The transaction type field is required'),\r\n        dateTransaction: Yup.string().required('The transaction date field is required').nullable()\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            // @ts-ignore\r\n            loadTransactions(id).then(transaction => setTransaction(new TransactionFormValues(transaction)));\r\n        }\r\n        loadingTransactionTypesAll();\r\n    }, [id, loadTransactions, loadTransactionTypes])\r\n\r\n    function handleFormSubmit(transaction: TransactionFormValues) {\r\n        if (!transaction.id) {\r\n            let newTransaction = {\r\n                ...transaction, id: uuid()\r\n            };\r\n            createTransaction(newTransaction)\r\n                .then(() => history.push(`/transactions/${newTransaction.id}`))\r\n        } else {\r\n            updateTransaction(transaction)\r\n                .then(() => history.push(`/transactions/${transaction.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading transaction...'/>\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Transaction Details' sub color='teal'/>\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize initialValues={transaction}\r\n                onSubmit={(values, {setErrors}) => handleFormSubmit(values)}>\r\n                {({handleSubmit, isValid, isSubmitting, dirty, errors}) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput placeholder='Money' name='money'/>\r\n                        <MyTextInput placeholder='TransactionStatus'\r\n                                     name='transactionStatus'/>\r\n                        <MySelectInput options={transactionTypesOptionsArray} placeholder='TransactionType'\r\n                                       name='transactionTypeId'/>\r\n                        <MyDateInput\r\n                            placeholderText='TransactionDate'\r\n                            name='dateTransaction'\r\n                            dateFormat='d MMMM,yyyy'/>\r\n                        <ErrorMessage name='error' render={() =>\r\n                            <ValidationError errors={errors.error}/>}\r\n                        />\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} floated='right' positive type='submit' content='Submit'/>\r\n                        {transaction.id === 'undefined' ?\r\n                            <Button as={Link} to={`/transactions`} floated='right' type='button'\r\n                                    content='Cancel'/> :\r\n                            <Button as={Link} to={`/transactions/${transaction.id}`} floated='right' type='button'\r\n                                    content='Cancel'/>}\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react'\r\nimport { Button, Header, Image, Item, Label, Segment } from 'semantic-ui-react'\r\nimport { Transaction } from \"../../../app/models/transaction\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { format } from \"date-fns\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(50%)',\r\n    height: '400px',\r\n    width: '100%',\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: 'auto',\r\n    height: '50',\r\n    color: 'white',\r\n};\r\n\r\ninterface Props {\r\n    transaction: Transaction\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({transaction}: Props) {\r\n    const {transactionStore: {cancelTransaction, loading, deleteTransaction}, userStore: {user}} = useStore();\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handleTransactionDelete(event: SyntheticEvent<HTMLButtonElement>, id: string) {\r\n        setTarget(event.currentTarget.name);\r\n        deleteTransaction(id);\r\n    }\r\n\r\n    return (\r\n        <Segment.Group>\r\n            {transaction.isCanceled &&\r\n            <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center', zIndex: '1000',}}/>\r\n            }\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {transaction.transactionStatus === false ?\r\n                    <Image src={`/assets/categoryImages/outcome.png`} fluid style={activityImageStyle}/>\r\n                    :\r\n                    <Image src={`/assets/categoryImages/income.png`} fluid style={activityImageStyle}/>\r\n                }\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={transaction.money}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(transaction.dateTransaction!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Created by <strong><Link\r\n                                    to={`/userprofile/${user?.displayName}`}>{user?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                <Item.Content>\r\n                    <Button disabled={transaction.isCanceled} as={Link} to={`/manageTransaction/${transaction.id}`}\r\n                            color='orange' floated='left'>\r\n                        Edit Transaction\r\n                    </Button>\r\n                    <Button\r\n                        color={transaction.isCanceled ? 'green' : 'red'}\r\n                        floated='left'\r\n                        basic\r\n                        content={transaction.isCanceled ? 'Re-activate transaction' : 'Cancel Transaction'}\r\n                        onClick={cancelTransaction}\r\n                        loading={loading}\r\n                        name={transaction.id}\r\n                    />\r\n                    <Button disabled={transaction.isCanceled}\r\n                            as={Link} to={`/transactions`}\r\n                            onClick={(e) => handleTransactionDelete(e, transaction.id)}\r\n                            color='red'\r\n                            name={transaction.id}\r\n                            loading={loading && target === transaction.id}\r\n                            floated='right'>Delete Transaction</Button>\r\n                    <Button disabled={transaction.isCanceled} as={Link} to={`/manageBankTransaction/${transaction.id}`}\r\n                            color='blue' floated='right'>\r\n                        Assign Bank\r\n                    </Button>\r\n                </Item.Content>\r\n\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Grid, Icon, Segment } from 'semantic-ui-react'\r\nimport { Transaction } from \"../../../app/models/transaction\";\r\nimport { format } from \"date-fns\";\r\n\r\ninterface Props {\r\n    transaction: Transaction\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({transaction}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        {transaction.transactionStatus ? (<p>Income</p>) : (<p>Outcome</p>)}\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='content' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n                   {transaction.transactionType?.length!==0  ? (<p>{transaction.transactionType}</p>) : (\r\n                       <p>Transaction type was not defined</p>)}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='money' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n                   {transaction.bankDto?.length ? (\r\n                       <span>\r\n                           {transaction.bankDto.map((bank) => (\r\n                               <p>  {bank.name} </p>\r\n                           ))}\r\n                      </span>\r\n                   ) : (<p>Banks were not defined</p>)}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(transaction.dateTransaction!, 'dd MMM yyyy')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React, { useEffect } from \"react\";\r\nimport { Container } from \"@material-ui/core\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport TransactionDetailedHeader from \"./TransactionDetailedHeader\";\r\nimport TransactionDetailedInfo from \"./TransactionDetailedInfo\";\r\nimport { useStyles } from \"../../../assets/pages\";\r\n\r\nexport default observer(function TransactionDetails() {\r\n    const classes = useStyles();\r\n    const {transactionStore} = useStore();\r\n    const {selectedTransaction: transaction, loadTransactions, loadingInitial,transactionRegistry} = transactionStore;\r\n    const {id} = useParams<{ id: string }>();\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            loadTransactions(id);\r\n        }\r\n    }, [id, loadTransactions,transactionRegistry]);\r\n\r\n    if (loadingInitial || !transaction) return <LoadingComponent/>;\r\n\r\n    return (\r\n        <Container maxWidth='md' className={classes.alignLeft} >\r\n                <TransactionDetailedHeader transaction={transaction}/>\r\n                <TransactionDetailedInfo transaction={transaction}/>\r\n        </Container>\r\n    )\r\n})","import React, { useState } from 'react';\r\n// import { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationError from \"./ValidationError\";\r\nimport { useStyles } from \"../../assets/pages\";\r\nimport { Button, Typography, Container, ButtonGroup } from \"@material-ui/core\"\r\n\r\nexport default function TestErrors() {\r\n    const classes = useStyles();\r\n    const baseUrl = 'https://localhost:44303/api/'\r\n    const [errors, setErros] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'error/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'error/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'error/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'error/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'transaction/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'transaction', {}).catch(err => setErros(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Typography variant='h2' className={classes.alignCenter}>Test Error component</Typography>\r\n            <Container className={classes.alignCenter}>\r\n                <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n                    <Button onClick={handleNotFound}>Not Found</Button>\r\n                    <Button onClick={handleBadRequest}>Bad Request</Button>\r\n                    <Button onClick={handleValidationError}>Validation Error</Button>\r\n                    <Button onClick={handleServerError}>Server Error</Button>\r\n                    <Button onClick={handleUnauthorised}>Unauthorised</Button>\r\n                    <Button onClick={handleBadGuid}>Bad Guid</Button>\r\n                </ButtonGroup>\r\n            </Container>\r\n            {errors &&\r\n            <ValidationError errors={errors}/>\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport { Button, Typography, Container } from \"@material-ui/core\"\r\nimport { Link } from \"react-router-dom\";\r\nimport { useStyles } from \"../../assets/pages\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\n\r\nexport default function NotFound() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container className={classes.alignCenter}>\r\n            <SearchIcon className={classes.searchIcon} />\r\n            <Typography variant=\"h6\"\r\n                        color=\"inherit\"\r\n                        className={classes.alignCenter}>\r\n                Not found recheck please and try again\r\n            </Typography>\r\n            <Container>\r\n                <Button component={Link} to='/transactions' color=\"primary\" variant=\"contained\">\r\n                    Return to transactions page\r\n                </Button>\r\n            </Container>\r\n        </Container>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Typography, Container } from \"@material-ui/core\"\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useStyles } from \"../../assets/pages\";\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Container>\r\n            <Typography variant='h2'>Server Error</Typography>\r\n            <Typography variant='h5' className={classes.colorRed}>{commonStore.error?.message}</Typography>\r\n            {commonStore.error?.details &&\r\n            <Container>\r\n                <Typography variant='h4' className={classes.colorTeal}>Stack trace</Typography>\r\n                <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n            </Container>\r\n            }\r\n        </Container>\r\n    )\r\n})","import React from \"react\";\r\nimport { useStore } from \"../../stores/store\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Modal } from \"semantic-ui-react\";\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Button, Item, Segment } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { TransactionType } from \"../../../app/models/transactionType\";\r\n\r\ninterface Props {\r\n    transactionType: TransactionType\r\n}\r\n\r\nexport default function TransactionTypeListItem({transactionType}: Props) {\r\n    const {transactionTypeStore: { loading,deleteTransactionType}} = useStore();\r\n    const [target, setTarget] = useState('');\r\n    function handleTransactionTypeDelete(event: SyntheticEvent<HTMLButtonElement>, id: string) {\r\n        setTarget(event.currentTarget.name);\r\n        deleteTransactionType(id);\r\n    }\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/transactionsType/${transactionType.id}`}>\r\n                                {transactionType.transactionType}\r\n                            </Item.Header>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment clearing>\r\n                <Button\r\n                    as={Link} to={`/transactionTypes`}\r\n                    onClick={(e)=>handleTransactionTypeDelete(e,transactionType.id)}\r\n                    color='red'\r\n                    name={transactionType.id}\r\n                    loading={loading && target===transactionType.id}\r\n                    floated='right'\r\n                    content='Delete Type'/>\r\n                <Button as={Link} to={`/manageTransactionType/${transactionType.id}`}\r\n                        color='teal'\r\n                        floated='right'\r\n                        content='Edit'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import React, { Fragment } from \"react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport TransactionTypeListItem from \"./TransactionTypeListItem\";\r\n\r\nexport default observer(function TransactionList() {\r\n    const {transactionTypeStore} = useStore();\r\n    const {transactionTypesAlphabetically} = transactionTypeStore;\r\n\r\n    return (\r\n        <>\r\n                <Fragment>\r\n                    {transactionTypesAlphabetically.map((transactionType) => (\r\n                        <TransactionTypeListItem key={transactionType.id} transactionType={transactionType}/>\r\n                    ))}\r\n                </Fragment>\r\n        </>\r\n    )\r\n})","import React from 'react'\r\nimport { Button } from \"@material-ui/core\"\r\nimport { NavLink } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\n\r\nexport default observer(function ActivityDetailedSidebar() {\r\n    return (\r\n        <>\r\n            <Button variant=\"contained\"  color='primary' component={NavLink} to='/createTransactionType'\r\n            >Create Type</Button>\r\n        </>\r\n    )\r\n})","import React, { useEffect, useState } from \"react\";\r\nimport { CircularProgress, Container, Grid } from \"@material-ui/core\"\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport TransactionTypeLists from \"./TransactionTypeLists\";\r\nimport TransactionTypeButton from \"./TransactionTypeFilters\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport TransactionListItemPlaceholder from \"../../transactions/dashboard/TransactionListItemPlaceholder\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\n\r\nexport default observer(function TransactionTypeDashboard() {\r\n    const {transactionTypeStore} = useStore();\r\n    const {\r\n        transactionTypeRegistry,\r\n        loadingTransactionTypes,\r\n        loadTransactionTypes,\r\n        setPagingParams,\r\n        pagination,\r\n        pagingParams\r\n    } = transactionTypeStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadingTransactionTypes().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (transactionTypeRegistry.size <= 1) {\r\n            loadingTransactionTypes();\r\n        }\r\n    }, [transactionTypeRegistry.size, pagingParams, loadTransactionTypes]);\r\n\r\n    return (\r\n        <Grid container>\r\n            <Grid item xs={9}>\r\n                {transactionTypeStore.loadingInitial && !loadingNext ? (\r\n                        <>\r\n                            <TransactionListItemPlaceholder/>\r\n                            <TransactionListItemPlaceholder/>\r\n                        </>\r\n                    ) :\r\n                    <InfiniteScroll pageStart={0} loadMore={handleGetNext}\r\n                                    hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                                    initialLoad={false}>\r\n                        <TransactionTypeLists/>\r\n                        <Container>\r\n                            {loadingNext ?\r\n                                <CircularProgress/> : false}\r\n                        </Container>\r\n                    </InfiniteScroll>\r\n                }\r\n            </Grid>\r\n            <Grid item xs={2} style={{paddingLeft: \"20px\"}}>\r\n                <TransactionTypeButton/>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n})\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Header,  Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { v4 as uuid } from 'uuid';\r\nimport {  Form, Formik } from \"formik\";\r\nimport * as Yup from 'yup'\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport {  TransactionTypeFormValues } from \"../../../app/models/transactionType\";\r\n\r\nexport default observer(function TransactionForm() {\r\n    const history = useHistory();\r\n    const {transactionTypeStore} = useStore();\r\n    const {\r\n        createTransactionType,\r\n        updateTransactionType,\r\n        loadTransactionTypes,\r\n        loadingInitial\r\n    } = transactionTypeStore;\r\n    const {id} = useParams<{ id: string }>();\r\n\r\n    const [transactionType, setTransactionType] = useState<TransactionTypeFormValues>(new TransactionTypeFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        transactionType: Yup.string().required('The transaction type field is required'),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            // @ts-ignore\r\n            loadTransactionTypes(id).then(transactionType => setTransactionType(new TransactionTypeFormValues(transactionType)));\r\n        }\r\n    }, [id, loadTransactionTypes])\r\n\r\n    function handleFormSubmit(transactionType: TransactionTypeFormValues) {\r\n        if (!transactionType.id) {\r\n            let newTransactionType = {\r\n                ...transactionType, id: uuid()\r\n            };\r\n            createTransactionType(newTransactionType)\r\n                .then(() => history.push(`/transactionTypes`))\r\n        } else {\r\n            updateTransactionType(transactionType)\r\n                .then(() => history.push(`/transactionTypes`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading transactionTypes...'/>\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='TransactionType Details' sub color='teal'/>\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize initialValues={transactionType}\r\n                onSubmit={(values, {setErrors}) => handleFormSubmit(values)}>\r\n                {({handleSubmit, isValid, isSubmitting, dirty, errors}) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput placeholder='TransactionType'\r\n                                     name='transactionType'/>\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} floated='right' positive type='submit' content='Submit'/>\r\n                        <Button as={Link} to={`/transactionTypes`} floated='right' type='button'\r\n                                content='Cancel'/>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import React from \"react\";\r\nimport { Grid, Header, Item, Segment } from \"semantic-ui-react\";\r\nimport { UserProfile } from \"../../app/models/profile\";\r\nimport { observer } from \"mobx-react-lite\";\r\n\r\ninterface Props {\r\n    userProfile: UserProfile;\r\n}\r\n\r\nexport default observer(function UserProfileHeader({userProfile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={userProfile.image || '/assets/user.png'}/>\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={userProfile.displayName}/>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {preview: URL.createObjectURL(file)})))\r\n    }, [setFiles])\r\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge'/>\r\n            <Header content='Drop Image Here'/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css'\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header} from \"semantic-ui-react\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({uploadPhoto, loading}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview));\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 1-add photo'/>\r\n                <PhotoWidgetDropzone setFiles={setFiles}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 2-resize'/>\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview}/>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={4}>\r\n                <Header color='teal' content='Step 3-preview & upload photo'/>\r\n                {files && files.length > 0 &&\r\n                <>\r\n                    <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}}/>\r\n                    <Button.Group widths={2}>\r\n                        <Button loading={loading} onClick={onCrop} positive icon='check'/>\r\n                        <Button disabled={loading} onClick={() => setFiles([])} icon='close'/>\r\n                    </Button.Group>\r\n                </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import React, { SyntheticEvent, useState } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Card, Grid, Header, Image, Tab } from \"semantic-ui-react\";\r\nimport { Photo, UserProfile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\n\r\ninterface Props {\r\n    userProfile: UserProfile;\r\n}\r\n\r\nexport default observer(function UserProfilePhotos({userProfile}: Props) {\r\n    const {\r\n        userProfileStore: {\r\n            isCurrentUser,\r\n            uploadPhoto,\r\n            uploading,\r\n            setMainPhoto,\r\n            loading,\r\n            deletePhoto\r\n        }\r\n    } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTraget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTraget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTraget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos'/>\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                                onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading}/>\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {userProfile.photos?.map(photo =>\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url}/>\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic color='green' content='Main' name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button\r\n                                                basic color='red' icon='trash' loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)} disabled={photo.isMain}\r\n                                                name={photo.id}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            )}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n        </Tab.Pane>\r\n    )\r\n})","export interface UserDescription {\r\n    userDescription: string;\r\n}\r\n\r\nexport class UserDescriptionFormValues {\r\n    userDescription: string = '';\r\n\r\n    constructor(userDescription?: string) {\r\n        if (userDescription) {\r\n            this.userDescription = userDescription;\r\n        }\r\n    }\r\n}\r\n\r\nexport class UserDescription implements UserDescription {\r\n    constructor(init?: UserDescriptionFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}","import React from \"react\";\r\nimport { useField } from \"formik\";\r\nimport { Form } from \"semantic-ui-react\";\r\nimport { Alert } from '@material-ui/lab';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field}{...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Alert severity=\"error\">{meta.error}</Alert>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import React, { useState } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Card, Grid, Header, Segment, Tab } from \"semantic-ui-react\";\r\nimport { UserProfile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { UserDescriptionFormValues } from \"../../app/models/userDescription\";\r\nimport { Form, Formik } from \"formik\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport * as Yup from \"yup\";\r\n\r\ninterface Props {\r\n    userProfile: UserProfile;\r\n}\r\n\r\nexport default observer(function UserProfileAbout({userProfile}: Props) {\r\n    const {userName} = useParams<{ userName: string }>();\r\n    const {\r\n        userProfileStore: {\r\n            isCurrentUser,\r\n            uploadPhoto,\r\n            uploading,\r\n            createDescription,\r\n            uploadDescription,\r\n            setMainPhoto,\r\n            loading,\r\n            deletePhoto, loadUserProfile\r\n        }\r\n    } = useStore();\r\n\r\n    const validationSchema = Yup.object({\r\n        description: Yup.string().required('The description field is required'),\r\n    })\r\n\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTraget] = useState('');\r\n\r\n    function handleFormSubmit(description: UserDescriptionFormValues) {\r\n        if (userProfile.userDescription === null) {\r\n            createDescription(description)\r\n                .then(() => setAddPhotoMode(false))\r\n                .then(() => loadUserProfile(userName));\r\n        } else {\r\n            uploadDescription(description)\r\n                .then(() => setAddPhotoMode(false))\r\n                .then(() => loadUserProfile(userName));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='info circle' content='Description'/>\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic content={addPhotoMode ? 'Cancel' : 'Edit description'}\r\n                                onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <Segment clearing>\r\n                            <Formik\r\n                                validationSchema={validationSchema}\r\n                                enableReinitialize\r\n                                initialValues={new UserDescriptionFormValues(userProfile.userDescription)}\r\n                                onSubmit={(values, {setErrors}) => handleFormSubmit(values)}>\r\n                                {({handleSubmit, isValid, isSubmitting, dirty, errors}) => (\r\n                                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                                        <MyTextArea rows={5} placeholder='Description'\r\n                                                    name='description'/>\r\n                                        <Button\r\n                                            disabled={isSubmitting || !dirty || !isValid}\r\n                                            loading={isSubmitting} floated='right' positive type='submit'\r\n                                            content='Submit'/>\r\n                                    </Form>\r\n                                )}\r\n                            </Formik>\r\n                        </Segment>\r\n                    ) : (\r\n                        <Card.Group>\r\n                            <Card fluid key={userProfile.displayName}>\r\n                                {userProfile.userDescription}\r\n                            </Card>\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n        </Tab.Pane>\r\n    )\r\n})","import React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport UserProfilePhotos from \"./UserProfilePhotos\";\r\nimport { UserProfile } from \"../../app/models/profile\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport UserProfileAbout from \"./UserProfileAbout\";\r\n\r\ninterface Props{\r\n    userProfile:UserProfile;\r\n}\r\n\r\nexport default observer(function UserProfileContent({userProfile}: Props) {\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <UserProfileAbout userProfile={userProfile}/>},\r\n        {menuItem: 'Photos', render: () => <UserProfilePhotos userProfile={userProfile}/>},\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            menu={{fluid:true,vertical:true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n        />\r\n    )\r\n})","import React, { useEffect } from \"react\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport UserProfileHeader from \"./UserProfileHeader\";\r\nimport UserProfileContent from \"./UserProfileContent\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\n\r\nexport default observer(function UserProfilePage() {\r\n    const {userName} = useParams<{ userName: string }>();\r\n    const {userProfileStore} = useStore();\r\n    const {userProfile, loadingProfile, loadUserProfile} = userProfileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserProfile(userName);\r\n    }, [loadUserProfile, userName])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading user profile...'/>\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {userProfile &&\r\n                <>\r\n                    <UserProfileHeader userProfile={userProfile}/>\r\n                    <UserProfileContent userProfile={userProfile}/>\r\n                </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from \"react\";\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedin}} = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedin ? <Component {...props}/> : <Redirect to='/'/>}\r\n        />\r\n    )\r\n}","import { Button, Item, Segment } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { TransactionType } from \"../../../app/models/transactionType\";\r\nimport { Bank } from \"../../../app/models/bank\";\r\nimport { Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from \"@material-ui/core\";\r\nimport { DataGrid, GridColDef, GridValueGetterParams } from '@material-ui/data-grid';\r\nimport { useStyles } from \"../../../assets/pages\";\r\n\r\ninterface Props {\r\n    bankOption:Map<string,string>;\r\n}\r\n\r\nconst columns: GridColDef[] = [\r\n    { field: 'text', headerName: 'Bank name', width: 230, headerClassName: 'super-app-theme--header'},\r\n];\r\n\r\nexport default function BankListItem({bankOption}: Props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div style={{ height: 320, width: '100%' }} className={classes.backgroundColorWhite}>\r\n            <DataGrid rows={Array.from(bankOption, ([text, value]) => ({text, value}))} getRowId={(banksOptionsArray) => banksOptionsArray.value}\r\n                      columns={columns} pageSize={4}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// <Segment.Group>\r\n//     <Segment>\r\n//         <Item.Group>\r\n//             <Item>\r\n//                 <Item.Content>\r\n//                     <Item.Header as={Link} to={`/transactionsType/${bank.id}`}>\r\n//                         {bank.name}\r\n//                     </Item.Header>\r\n//                 </Item.Content>\r\n//             </Item>\r\n//         </Item.Group>\r\n//     </Segment>\r\n//     <Segment clearing>\r\n//         <Button\r\n//             as={Link} to={`/transactionTypes`}\r\n//             onClick={(e)=>handleTransactionTypeDelete(e,bank.id)}\r\n//             color='red'\r\n//             name={bank.id}\r\n//             loading={loading && target===bank.id}\r\n//             floated='right'\r\n//             content='Delete Type'/>\r\n//         <Button as={Link} to={`/manageTransactionType/${bank.id}`}\r\n//                 color='teal'\r\n//                 floated='right'\r\n//                 content='Edit'\r\n//         />\r\n//     </Segment>\r\n// </Segment.Group>","import React, { useEffect } from \"react\";\r\nimport { Container } from \"@material-ui/core\"\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport TransactionListItemPlaceholder from \"../../transactions/dashboard/TransactionListItemPlaceholder\";\r\nimport { useStyles } from \"../../../assets/pages\";\r\nimport BankListItem from \"./BankListItem\";\r\n\r\nexport default observer(function BankDashboard() {\r\n    const classes = useStyles();\r\n    const {bankStore} = useStore();\r\n    const {\r\n        bankOption,\r\n        bankRegistry,\r\n        loadingBanks,\r\n        loadBanks,\r\n        pagingParams\r\n    } = bankStore;\r\n\r\n\r\n    useEffect(() => {\r\n        if (bankRegistry.size <= 1) {\r\n            loadingBanks();\r\n        }\r\n    }, [bankRegistry.size, pagingParams, loadBanks]);\r\n\r\n    return (\r\n        <Container>\r\n            <Container>\r\n                {bankStore.loadingInitial ? (\r\n                        <>\r\n                            <TransactionListItemPlaceholder/>\r\n                            <TransactionListItemPlaceholder/>\r\n                        </>\r\n                    ) :\r\n                    <BankListItem bankOption={bankOption}/>\r\n                }\r\n            </Container>\r\n        </Container>\r\n    );\r\n})\r\n","export interface Bank{\r\n    id:string;\r\n    name:string;\r\n}\r\n\r\nexport class BankFormValues {\r\n    id?: string = undefined;\r\n    name: string = '';\r\n\r\n    constructor(bank?: BankFormValues) {\r\n        if (bank) {\r\n            this.id = bank.id;\r\n            this.name = bank.name;\r\n        }\r\n    }\r\n}\r\n\r\nexport class Bank implements Bank {\r\n    constructor(init?: BankFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { v4 as uuid } from 'uuid';\r\nimport { ErrorMessage, Form, Formik } from \"formik\";\r\nimport * as Yup from 'yup'\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { TransactionFormValues } from \"../../../app/models/transaction\";\r\nimport ValidationError from \"../../errors/ValidationError\";\r\nimport { BankFormValues } from \"../../../app/models/bank\";\r\n\r\nexport default observer(function TransactionForm() {\r\n    const history = useHistory();\r\n    const {\r\n        bankStore: {\r\n            loadBanks,\r\n            banksOptionsArray,\r\n            loadingBanks,\r\n            assignBank\r\n        }, transactionStore\r\n    } = useStore();\r\n    const {\r\n        loadTransactions,\r\n        loadingInitial\r\n    } = transactionStore;\r\n    const {bankId, id} = useParams<{ id: string, bankId: string }>();\r\n\r\n    const [transaction, setTransaction] = useState<TransactionFormValues>(new TransactionFormValues());\r\n    const [bankTransaction, setBankTransaction] = useState<BankFormValues>(new BankFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        id: Yup.string().required('The bank field is required'),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            // @ts-ignore\r\n            loadTransactions(id).then(transaction => setTransaction(new TransactionFormValues(transaction)));\r\n        }\r\n        loadingBanks();\r\n    }, [id, loadTransactions, loadBanks])\r\n\r\n    function handleFormSubmit(bankTransaction: BankFormValues) {\r\n        // @ts-ignore\r\n        assignBank(bankTransaction.id, id)\r\n            .then(() => history.push(`/transactions/${transaction.id}`))\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading banks...'/>\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Available Banks' sub color='teal'/>\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize initialValues={bankTransaction}\r\n                onSubmit={(values, {setErrors}) => handleFormSubmit(values)}>\r\n                {({handleSubmit, isValid, isSubmitting, dirty, errors}) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MySelectInput options={banksOptionsArray} placeholder='Bank'\r\n                                       name='id'/>\r\n                        {/*<ErrorMessage name='error' render={() =>*/}\r\n                        {/*    <ValidationError errors={errors.error}/>}*/}\r\n                        {/*/>*/}\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} floated='right' positive type='submit' content='Submit'/>\r\n                        <Button as={Link} to={`/transactions/${transaction.id}`} floated='right' type='button'\r\n                                content='Cancel'/>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import React, { Fragment, useEffect } from \"react\";\nimport { Container } from \"@material-ui/core\";\nimport NavBar from \"./NavBar\";\nimport TransactionDashboard from \"../../features/transactions/dashboard/TransactionDashboard\";\nimport { observer } from \"mobx-react-lite\";\nimport HomePage from \"../../features/home/HomePage\";\nimport { Route, Switch, useLocation } from \"react-router-dom\";\nimport TransactionForm from \"../../features/transactions/form/TransactionForm\";\nimport TransactionDetails from \"../../features/transactions/details/TransactionDetails\";\nimport TestErrors from \"../../features/errors/TestError\";\nimport { ToastContainer } from \"react-toastify\";\nimport NotFound from \"../../features/errors/NotFound\";\nimport ServerError from \"../../features/errors/ServerError\";\nimport { useStore } from \"../stores/store\";\nimport LoadingComponent from \"./LoadingComponent\";\nimport ModalContainer from \"../common/modals/modalContainer\";\nimport TransactionTypeDashboard from \"../../features/transactiontypes/dashboard/TransactionTypeDashboard\";\nimport TransactionTypeForm from \"../../features/transactiontypes/form/TransactionTypeForm\";\nimport UserProfilePage from \"../../features/profiles/UserProfilePage\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport \"./styles.css\";\nimport BankDashboard from \"../../features/banks/dashboard/BankDashboard\";\nimport TransactionBankForm from \"../../features/transactions/form/TransactionBankForm\";\n\nfunction App() {\n    const location = useLocation();\n    const {commonStore,userStore}=useStore();\n\n    useEffect(()=>{\n        if(commonStore.token){\n            userStore.getUser().finally(()=>commonStore.setAppLoaded());\n        }else{\n            commonStore.setAppLoaded();\n        }\n    },[commonStore,userStore])\n\n    if(!commonStore.appLoaded) return <LoadingComponent content='Loading app...'/>\n\n    return (\n        <Fragment>\n            <ToastContainer position='top-right' hideProgressBar/>\n            <ModalContainer/>\n            <Route exact path='/' component={HomePage}/>\n            <Route\n                path={'/(.+)'}\n                render={() => (\n                    <>\n                        <NavBar/>\n                        <Container className=\"default-margin\">\n                            <Switch>\n                                <PrivateRoute exact path='/transactions' component={TransactionDashboard}/>\n                                <PrivateRoute exact path='/transactionTypes' component={TransactionTypeDashboard}/>\n                                <PrivateRoute exact path='/banks' component={BankDashboard}/>\n                                <PrivateRoute key={location.key} path={['/manageBankTransaction/:id']}\n                                              component={TransactionBankForm}/>\n                                <PrivateRoute key={location.key} path={['/createTransactionType', '/manageTransactionType/:id']}\n                                       component={TransactionTypeForm}/>\n                                <PrivateRoute key={location.key} path={['/createTransaction', '/manageTransaction/:id']}\n                                       component={TransactionForm}/>\n                                <PrivateRoute path='/transactions/:id' component={TransactionDetails}/>\n                                <PrivateRoute path='/userProfile/:userName' component={UserProfilePage}/>\n                                <Route path='/error' component={TestErrors}/>\n                                <Route path='/server-error' component={ServerError}/>\n                                <Route component={NotFound}/>\n                            </Switch>\n                        </Container>\n                    </>\n                )}\n            />\n        </Fragment>\n    );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './app/layout/styles.css';\nimport 'react-datepicker/dist/react-datepicker.css'\nimport App from './app/layout/App';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from \"./app/stores/store\";\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from 'history'\nimport ScrollToTop from \"./app/layout/ScrollToTop\";\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n    <StoreContext.Provider value={store}>\n        <Router history={history}>\n            <ScrollToTop/>\n            <App/>,\n        </Router>\n    </StoreContext.Provider>,\n\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}